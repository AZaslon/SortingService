using System;
using System.Collections.Generic;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using SortingWebApi.Commands;
using SortingWebApi.Model;
using SortingWebApi.Queries;
using JsonSerializer = System.Text.Json.JsonSerializer;

namespace SortingWebApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SortingController : ControllerBase
    {
        private readonly TimeSpan _requestTimeout = TimeSpan.FromSeconds(20);
        private const string AscSortJobType = "sorting_asc";
        private readonly ILogger<SortingController> _logger;
        private readonly IScheduleJobCommandHandler _commandHandler;
        private readonly IQuery<JobsStatisticsRequest, IAsyncEnumerable<JobDescriptor>> _getJobsQuery;
        private readonly IQuery<GetJobStatisticByIdRequest, Task<JobDescriptor>> _getJobByIdQuery;

        public SortingController(ILogger<SortingController> logger, IScheduleJobCommandHandler commandHandler,
            IQuery<JobsStatisticsRequest, IAsyncEnumerable<JobDescriptor>> getJobsQuery,
            IQuery<GetJobStatisticByIdRequest, Task<JobDescriptor>> getJobByIdQuery
            )
        {
            _logger = logger;
            _commandHandler = commandHandler;
            _getJobsQuery = getJobsQuery;
            _getJobByIdQuery = getJobByIdQuery;
        }

        [HttpPost("SortAsync")]
        public async Task<JobDescriptor> SortAsync([FromBody] ScheduleJobRequest job)
        {
            _logger.LogDebug("Job request received.");

            var command = new ScheduleJobCommand(JsonSerializer.Serialize(job.Payload), AscSortJobType);

            //TODO: implement proper cancellation handling
            var jobDescriptor = await _commandHandler.HandleCommand(command, CancellationToken.None);

            return jobDescriptor;
        }

        [HttpGet("Get/{id}")]
        public async Task<JobDescriptor> Get(string id)
        {
            var cts = new CancellationTokenSource(_requestTimeout);
            return await _getJobByIdQuery.ExecuteRequest(new GetJobStatisticByIdRequest(AscSortJobType, id), cts.Token);
        }

        [HttpGet]
        [Route("/DummyData")]
        public Task<JobDescriptor> GenerateDummyData()
        {
            return SortAsync(new ScheduleJobRequest() {Payload = GeneratePayload()});
        }

        private static int[] GeneratePayload()
        {
            var rand = new Random();
            var array = new int[5];
            for (int i = 0; i < array.Length-1; i++)
            {
                array[i] = rand.Next(99);
            }
            return new int[] {1, 8, 10, 100, 5};
        }

        [HttpGet]
        [Route("List")]
        public async IAsyncEnumerable<JobDescriptor> List()
        {
            var cts = new CancellationTokenSource(_requestTimeout);
            var asyncEnumResults = _getJobsQuery.ExecuteRequest(new JobsStatisticsRequest(AscSortJobType), cts.Token);

            await foreach (var jobDescriptor in asyncEnumResults.WithCancellation(cts.Token))
            {
                yield return jobDescriptor;
            }
        }

        [HttpGet]
        [Route("/")]
        public ContentResult Index()
        {
            return new ContentResult
            {
                ContentType = "text/html",
                StatusCode = (int) HttpStatusCode.OK,
                Content = "<html><body>Welcome to sorting service Demo page.</body>" +
                          "<p><a href='/api/sorting/list'> Show all jobs</a></p>" +
                          "<p><a href='/DummyData'> Start job with autogenerated data.</a></p>" +
                          "<p> <input type='text' name='jobid'/> To request Job status by ID <input type='button' value='Get status' onclick=\"window.location.href='/api/sorting/get/' +  document.getElementsByName('jobid')[0].value\" />" +
                          "</html>"
            };
        }
    }
}
